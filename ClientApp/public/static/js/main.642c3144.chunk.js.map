{"version":3,"sources":["store/WeatherForecasts.ts","store/index.ts","store/Counter.ts","components/NavMenu.tsx","components/Layout.tsx","components/goblet-fire.gif","components/GobletFire.tsx","components/DamnationWebPlayer.tsx","components/GameContainer.tsx","components/GameSection.tsx","components/Home.tsx","components/Counter.tsx","components/FetchData.tsx","App.tsx","registerServiceWorker.ts","index.tsx","store/configureStore.ts"],"names":["actionCreators","requestWeatherForecasts","startDateIndex","dispatch","getState","appState","weatherForecasts","fetch","then","response","json","data","type","forecasts","unloadedState","isLoading","reducers","counter","state","incomingAction","undefined","count","action","NavMenu","isOpen","toggle","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","this","Collapse","navbar","NavItem","NavLink","React","props","children","GobletFire","src","gobletFire","alt","Component","DamnationWebPlayer","unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","webPlayerWidth","style","width","GameContainer","GameSection","connect","href","Counter","increment","decrement","FetchData","ensureDataFetched","id","renderForecastsTable","renderPagination","parseInt","match","params","map","forecast","key","date","temperatureC","temperatureF","summary","prevStartDateIndex","nextStartDateIndex","WeatherForecastsStore","Layout","exact","path","component","Home","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","baseUrl","document","getElementsByTagName","getAttribute","history","createBrowserHistory","basename","store","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","push","createStore","compose","applyMiddleware","configureStore","ReactDOM","App","getElementById","URL","process","toString","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.642c3144.chunk.js","sourcesContent":["import { Action, Reducer } from 'redux';\r\nimport { AppThunkAction } from './';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface WeatherForecastsState {\r\n    isLoading: boolean;\r\n    startDateIndex?: number;\r\n    forecasts: WeatherForecast[];\r\n}\r\n\r\nexport interface WeatherForecast {\r\n    date: string;\r\n    temperatureC: number;\r\n    temperatureF: number;\r\n    summary: string;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n\r\ninterface RequestWeatherForecastsAction {\r\n    type: 'REQUEST_WEATHER_FORECASTS';\r\n    startDateIndex: number;\r\n}\r\n\r\ninterface ReceiveWeatherForecastsAction {\r\n    type: 'RECEIVE_WEATHER_FORECASTS';\r\n    startDateIndex: number;\r\n    forecasts: WeatherForecast[];\r\n}\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\ntype KnownAction = RequestWeatherForecastsAction | ReceiveWeatherForecastsAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    requestWeatherForecasts: (startDateIndex: number): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        // Only load data if it's something we don't already have (and are not already loading)\r\n        const appState = getState();\r\n        if (appState && appState.weatherForecasts && startDateIndex !== appState.weatherForecasts.startDateIndex) {\r\n            fetch(`weatherforecast`)\r\n                .then(response => response.json() as Promise<WeatherForecast[]>)\r\n                .then(data => {\r\n                    dispatch({ type: 'RECEIVE_WEATHER_FORECASTS', startDateIndex: startDateIndex, forecasts: data });\r\n                });\r\n\r\n            dispatch({ type: 'REQUEST_WEATHER_FORECASTS', startDateIndex: startDateIndex });\r\n        }\r\n    }\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nconst unloadedState: WeatherForecastsState = { forecasts: [], isLoading: false };\r\n\r\nexport const reducer: Reducer<WeatherForecastsState> = (state: WeatherForecastsState | undefined, incomingAction: Action): WeatherForecastsState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'REQUEST_WEATHER_FORECASTS':\r\n            return {\r\n                startDateIndex: action.startDateIndex,\r\n                forecasts: state.forecasts,\r\n                isLoading: true\r\n            };\r\n        case 'RECEIVE_WEATHER_FORECASTS':\r\n            // Only accept the incoming data if it matches the most recent request. This ensures we correctly\r\n            // handle out-of-order responses.\r\n            if (action.startDateIndex === state.startDateIndex) {\r\n                return {\r\n                    startDateIndex: action.startDateIndex,\r\n                    forecasts: action.forecasts,\r\n                    isLoading: false\r\n                };\r\n            }\r\n            break;\r\n    }\r\n\r\n    return state;\r\n};\r\n","import * as WeatherForecasts from './WeatherForecasts';\r\nimport * as Counter from './Counter';\r\n\r\n// The top-level state object\r\nexport interface ApplicationState {\r\n    counter: Counter.CounterState | undefined;\r\n    weatherForecasts: WeatherForecasts.WeatherForecastsState | undefined;\r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n    counter: Counter.reducer,\r\n    weatherForecasts: WeatherForecasts.reducer\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface AppThunkAction<TAction> {\r\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\r\n}\r\n","import { Action, Reducer } from 'redux';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface CounterState {\r\n    count: number;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\r\n\r\nexport interface IncrementCountAction { type: 'INCREMENT_COUNT' }\r\nexport interface DecrementCountAction { type: 'DECREMENT_COUNT' }\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\nexport type KnownAction = IncrementCountAction | DecrementCountAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    increment: () => ({ type: 'INCREMENT_COUNT' } as IncrementCountAction),\r\n    decrement: () => ({ type: 'DECREMENT_COUNT' } as DecrementCountAction)\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nexport const reducer: Reducer<CounterState> = (state: CounterState | undefined, incomingAction: Action): CounterState => {\r\n    if (state === undefined) {\r\n        return { count: 0 };\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'INCREMENT_COUNT':\r\n            return { count: state.count + 1 };\r\n        case 'DECREMENT_COUNT':\r\n            return { count: state.count - 1 };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import * as React from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport default class NavMenu extends React.PureComponent<{}, { isOpen: boolean }> {\r\n    public state = {\r\n        isOpen: false\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">-DAMNATION ONLINE-</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} className=\"mr-2\"/>\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={this.state.isOpen} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\r\n                                </NavItem>\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    private toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport NavMenu from './NavMenu';\r\n\r\nexport default (props: { children?: React.ReactNode }) => (\r\n    <React.Fragment>\r\n        <NavMenu/>\r\n        <Container>\r\n            {props.children}\r\n        </Container>\r\n    </React.Fragment>\r\n);\r\n","export default __webpack_public_path__ + \"static/media/goblet-fire.693b78ef.gif\";","import React from \"react\";\r\n// import ReactDom from \"react-dom\"\r\n// import { connect } from \"react-redux\";\r\n\r\nimport gobletFire from \"./goblet-fire.gif\";\r\n\r\nexport default class GobletFire extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <img className=\"gobletFireImage\" src={gobletFire} alt=\"leave me the fuck alone pls for the love of god pls\"></img>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n// import ReactDom from \"react-dom\"\r\n// import { connect } from \"react-redux\";\r\n\r\nimport Unity, { UnityContext } from \"react-unity-webgl\";\r\n\r\n// import GobletFire from \"./GobletFire\";\r\n\r\nexport default class DamnationWebPlayer extends React.Component {\r\n  \r\n  // unityContext = new UnityContext(\r\n  //   \"./Build/damnation-web.json\",\r\n  //   \"./Build/UnityLoader.js\",\r\n  //   {\r\n  //     adjustOnWindowResize: false\r\n    \r\n  //   }\r\n  // );\r\n  \r\n  \r\n  unityContext = new UnityContext({\r\n    loaderUrl: \"./Build/Build.loader.js\",\r\n    dataUrl: \"./Build/Build.data\",\r\n    frameworkUrl: \"./Build/Build.framework.js\",\r\n    codeUrl: \"./Build/Build.wasm\",\r\n  });\r\n\r\n  webPlayerWidth = 1000;\r\n  \r\n  // constructor(props: any) {\r\n  //   super(props);\r\n    \r\n\r\n  //   // Next up create a new Unity Content object to \r\n  //   // initialise and define your WebGL build. The \r\n  //   // paths are relative from your index file.\r\n\r\n  // }\r\n\r\n  render() {\r\n\r\n    // Finally render the Unity component and pass \r\n    // the Unity content through the props.\r\n\r\n    return (\r\n    \r\n        <div className=\"WebPlayer\" style={{width: this.webPlayerWidth}}>\r\n            <Unity unityContext={this.unityContext} \r\n            style={{width: this.webPlayerWidth}}\r\n            className=\"game-canvas\"/>\r\n        </div> \r\n      \r\n    );\r\n  }\r\n  \r\n    // render() {\r\n      \r\n    //     return (\r\n            \r\n    //       <div id=\"unityContainer\" style={{width: 960, height: 600}}></div>\r\n          \r\n    //     );\r\n    // }\r\n}","import React from \"react\";\r\n// import ReactDom from \"react-dom\"\r\n// import { connect } from \"react-redux\";\r\n\r\nimport DamnationWebPlayer from \"./DamnationWebPlayer\";\r\n// import GobletFire from \"./GobletFire\";\r\n\r\n\r\nexport default class GameContainer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"GameContainer nes-container is-dark\">\r\n                <DamnationWebPlayer></DamnationWebPlayer>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n// import ReactDom from \"react-dom\"\r\n// import { connect } from \"react-redux\";\r\n\r\n// import DamnationWebPlayer from \"./DamnationWebPlayer\";\r\nimport GobletFire from \"./GobletFire\";\r\nimport GameContainer from \"./GameContainer\";\r\n\r\n\r\nexport default class GameSection extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"GameSection\">\r\n                <GobletFire></GobletFire>\r\n                <GameContainer></GameContainer>\r\n                {/* <DamnationWebPlayer></DamnationWebPlayer> */}\r\n                <GobletFire></GobletFire>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport GameSection from './GameSection';\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1>DAMNATION-ONLINE!</h1>\r\n    <GameSection />\r\n    <p>Welcome to your new single-page application, built with:</p>\r\n    <ul>\r\n      <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n      <li><a href='https://facebook.github.io/react/'>React</a> and <a href='https://redux.js.org/'>Redux</a> for client-side code</li>\r\n      <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n    </ul>\r\n    <p>To help you get started, we've also set up:</p>\r\n    <ul>\r\n      <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n      <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n      <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\r\n    </ul>\r\n    <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n   </div>\r\n);\r\n\r\nexport default connect()(Home);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { ApplicationState } from '../store';\r\nimport * as CounterStore from '../store/Counter';\r\n\r\ntype CounterProps =\r\n    CounterStore.CounterState &\r\n    typeof CounterStore.actionCreators &\r\n    RouteComponentProps<{}>;\r\n\r\nclass Counter extends React.PureComponent<CounterProps> {\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Counter</h1>\r\n\r\n                <p>This is a simple example of a React component.</p>\r\n\r\n                <p aria-live=\"polite\">Current count: <strong>{this.props.count}</strong></p>\r\n\r\n                <button type=\"button\"\r\n                    className=\"btn btn-primary btn-lg\"\r\n                    onClick={() => { this.props.increment(); }}>\r\n                    Increment\r\n                </button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.counter,\r\n    CounterStore.actionCreators\r\n)(Counter);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { ApplicationState } from '../store';\r\nimport * as WeatherForecastsStore from '../store/WeatherForecasts';\r\n\r\n// At runtime, Redux will merge together...\r\ntype WeatherForecastProps =\r\n  WeatherForecastsStore.WeatherForecastsState // ... state we've requested from the Redux store\r\n  & typeof WeatherForecastsStore.actionCreators // ... plus action creators we've requested\r\n  & RouteComponentProps<{ startDateIndex: string }>; // ... plus incoming routing parameters\r\n\r\n\r\nclass FetchData extends React.PureComponent<WeatherForecastProps> {\r\n  // This method is called when the component is first added to the document\r\n  public componentDidMount() {\r\n    this.ensureDataFetched();\r\n  }\r\n\r\n  // This method is called when the route parameters change\r\n  public componentDidUpdate() {\r\n    this.ensureDataFetched();\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1 id=\"tabelLabel\">Weather forecast</h1>\r\n        <p>This component demonstrates fetching data from the server and working with URL parameters.</p>\r\n        {this.renderForecastsTable()}\r\n        {this.renderPagination()}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  private ensureDataFetched() {\r\n    const startDateIndex = parseInt(this.props.match.params.startDateIndex, 10) || 0;\r\n    this.props.requestWeatherForecasts(startDateIndex);\r\n  }\r\n\r\n  private renderForecastsTable() {\r\n    return (\r\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Temp. (C)</th>\r\n            <th>Temp. (F)</th>\r\n            <th>Summary</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.forecasts.map((forecast: WeatherForecastsStore.WeatherForecast) =>\r\n            <tr key={forecast.date}>\r\n              <td>{forecast.date}</td>\r\n              <td>{forecast.temperatureC}</td>\r\n              <td>{forecast.temperatureF}</td>\r\n              <td>{forecast.summary}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  private renderPagination() {\r\n    const prevStartDateIndex = (this.props.startDateIndex || 0) - 5;\r\n    const nextStartDateIndex = (this.props.startDateIndex || 0) + 5;\r\n\r\n    return (\r\n      <div className=\"d-flex justify-content-between\">\r\n        <Link className='btn btn-outline-secondary btn-sm' to={`/fetch-data/${prevStartDateIndex}`}>Previous</Link>\r\n        {this.props.isLoading && <span>Loading...</span>}\r\n        <Link className='btn btn-outline-secondary btn-sm' to={`/fetch-data/${nextStartDateIndex}`}>Next</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state: ApplicationState) => state.weatherForecasts, // Selects which state properties are merged into the component's props\r\n  WeatherForecastsStore.actionCreators // Selects which action creators are merged into the component's props\r\n)(FetchData as any);\r\n","import * as React from 'react';\r\nimport { Route } from 'react-router';\r\nimport Layout from './components/Layout';\r\nimport Home from './components/Home';\r\nimport Counter from './components/Counter';\r\nimport FetchData from './components/FetchData';\r\n\r\nimport './custom.css'\r\n\r\nexport default () => (\r\n    <Layout>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/counter' component={Counter} />\r\n        <Route path='/fetch-data/:startDateIndex?' component={FetchData} />\r\n    </Layout>\r\n);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const url = process.env.PUBLIC_URL as string;\r\n        const publicUrl = new URL(url, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing as ServiceWorker;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport configureStore from './store/configureStore';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n// Create browser history to use in the Redux store\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\r\nconst history = createBrowserHistory({ basename: baseUrl });\r\n\r\n// Get the application-wide store instance, prepopulating with state from the server where available.\r\nconst store = configureStore(history);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <App />\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { ApplicationState, reducers } from './';\r\n\r\nexport default function configureStore(history: History, initialState?: ApplicationState) {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ];\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\n    const enhancers = [];\r\n    const windowIfDefined = typeof window === 'undefined' ? null : window as any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n    }\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    );\r\n}\r\n"],"sourceRoot":""}